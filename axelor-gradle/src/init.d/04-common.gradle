import org.gradle.plugins.ide.eclipse.model.SourceFolder

allprojects { project ->
	
	// eclipse
	apply plugin: 'eclipse'
	
	plugins.withType(JavaPlugin) {
		eclipse {
			classpath {
				defaultOutputDir = file("bin/main")	
				file.whenMerged { cp ->
					// seperate output for main & test sources
					cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/") }*.output = "bin/main"
					cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/") }*.output = "bin/test"

					// remove self-dependency
					cp.entries.removeAll { it.path.contains("$project.name") && it.kind=='src' }
					cp.entries.removeAll { it.path.contains("$project.name/build") && it.kind=='lib' }
				}
				file.withXml {
					def node = it.asNode()
					node.findAll { it.@output == "bin/test" }*.@excluding = "**"
				}
			}
		}
	}

	// compiler
	tasks.withType(JavaCompile) {
		options.encoding = 'utf-8'
		options.compilerArgs = ['-Xlint:-options']
	}
	tasks.withType(GroovyCompile) {
		options.encoding = 'utf-8'
		options.compilerArgs = ['-Xlint:-options']
		groovyOptions.encoding = 'utf-8'
	}

	// generate version file for axelor projects
	task generateVersion() {
		onlyIf { project.group == "com.axelor" }
		doLast {
			def vf = file("${buildDir}/resources/main/${project.name}-version.txt")
			vf.parentFile.mkdirs()
			vf.text = project.version
		}
	}

	afterEvaluate {
		tasks.withType(JavaCompile)*.dependsOn generateVersion
	}
}
