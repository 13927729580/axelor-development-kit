apply plugin: "java"
apply plugin: "eclipse"

if (!(project.name ==~ /axelor-(development-kit|shell|test|gradle)/)) {
	apply plugin: "eclipse-wtp"
}

tasks.eclipse.dependsOn tasks.cleanEclipse
afterEvaluate {
	if (tasks.findByName('generateCode')) {
		tasks.eclipseClasspath.dependsOn tasks.generateCode
	}
}

eclipse {
	classpath {

		// default output directory
		defaultOutputDir = file("bin/main")

		// seperate output for main & test sources
		file.whenMerged { cp ->
			// seperate output for main & test sources
			cp.entries.findAll { it.kind == "src" && it.path == "build/src-gen" }*.output = "bin/main"
			cp.entries.findAll { it.kind == "src" && it.path.startsWith("src/main/") }*.output = "bin/main"
			cp.entries.findAll { it.kind == "src" && it.path.startsWith("src/test/") }*.output = "bin/test"

			// remove self-dependency
			cp.entries.removeAll { it.path.contains("$project.name") && it.kind == 'src' }
			cp.entries.removeAll { it.path.contains("$project.name/build") && it.kind == 'lib' }
		}
	}
}

def configureWebapp = {
	// first add app's webapp
	eclipse.wtp.component { resource sourcePath: 'src/main/webapp', deployPath: '/' }

	// next link axelor-web
	def webappDir = gradle.includedBuilds.findResult {
		def dir = new File(it.projectDir, 'axelor-web/src/main/webapp')
		return dir.exists() ? dir : null
	}
	if (webappDir) {
		eclipse {
			project { linkedResource name: 'axelor-webapp', type: '2', location: webappDir.path }
			wtp.component { resource sourcePath: webappDir.path, deployPath: '/' }
			wtp.component.file.withXml {
				//XXX: the replace absolute source-path with linked resource name
				def node = it.asNode().'**'.find { it.'@source-path' == webappDir.path }
				node.'@source-path' = 'axelor-webapp'
			}
		}
	}

	// finally add build/webapp
	eclipse.wtp.component { resource sourcePath: 'build/webapp', deployPath: '/' }
}

afterEvaluate {
	if (plugins.hasPlugin('axelor-app')) {
		configureWebapp()
	}
}
